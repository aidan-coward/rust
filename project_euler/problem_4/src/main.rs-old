extern crate prime_utils;

fn main() {
    let mut biggest_num = 999 * 999;
    //let mut palindrome_found: bool = false;
    while biggest_num > 800000 {
        biggest_num -= 1;
        let list = number_to_vector(biggest_num);
        let reversed_list = reverse_vector(&list);

        if palindrome_test(&list, &reversed_list) 
            //&& !prime_utils::prime_test(biggest_num) {
            for x in &list {
                print!("{}", x) 
            }
            println!("");
            //let biggest_num_float: f64 = biggest_num as f64; 
            //let upper_bound_float: f64 = biggest_num_float.sqrt();
            //let upper_bound_int: u64 = upper_bound_float as u64;
            //println!("the upper bound for {} is {}", biggest_num, upper_bound_int);
            for x in 1..1000 {
                if ( biggest_num % (999 - x) == 0 ) 
                    && ( 99 < x ) 
                    && ( x < 1000 )
                    && ( 99 < ( biggest_num / x ) )
                    && ( ( biggest_num / x ) < 1000 ) {
            
                    println!("the divisors of {} are: {} and {}", biggest_num, x, biggest_num / x);
                    //palindrome_found = true
                             }
               break; 
                        }
                    }
        }
}

            

/*    let list = number_to_vector(8640468);

    for x in &list {                    // if list is used, it can't be accessed by anything else so here a reference(&list) is used so that it gives it back once done
        println!("{}", x);
    }

    let reversed_list = reverse_vector(&list);

    for x in &reversed_list {
        println!("{}", x);
    }
    println!("{}", palindrome_test(&list, &reversed_list));
}
*/




fn number_to_vector(mut number_input: u64) -> Vec<u64> {
   let mut num_vector: Vec<u64> = Vec::new();           // creates new vector
   while number_input >= 1 {                            // if number is at least 1, take the last digit and put it into the first spot of the vector
       num_vector.insert(0, number_input % 10 );
       number_input =  number_input / 10;
   }

   num_vector
}

fn reverse_vector(input_vector: &Vec<u64>) -> Vec<u64> {
    let mut reversed_vector: Vec<u64> = Vec::new();     // take the element available and put it at the front of the list
    for element in input_vector {
        reversed_vector.insert(0, *element);
    }
    reversed_vector
}

fn palindrome_test(input_vector: &Vec<u64>, reversed_input_vector: &Vec<u64>) -> bool {
    for x in 0..(input_vector.len() / 2 + 1) {
            if input_vector[x] == reversed_input_vector[x] { continue; }
            else {return false; }
    }
    true
}    



